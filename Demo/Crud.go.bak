//   用go编写对rdbs的四个操作,add(insert),delete,update,select ;
//   userinfo(userid,username,password,registerAt,status,....,isdelete)

//   登录操作：select
//   修改密码：update
//   用户注册：add
//   删除用户：delete //逻辑删除 update

package main

import (
	"database/sql"
	"fmt"
	"time"

	_ "github.com/go-sql-driver/mysql"
)

type UserInfo struct {
	UserID     int
	Username   string
	Password   string
	RegisterAt time.Time
	Status     string
	IsDelete   bool
}

func main() {
	// 连接数据库
	db, err := sql.Open("mysql", "root:123456@tcp(127.0.0.1:3306)/go_db")
	if err != nil {
		panic(err.Error())
	}
	defer db.Close()

	// 测试添加用户
	user := UserInfo{
		Username:   "testuser",
		Password:   "testpassword",
		RegisterAt: time.Now(),
		Status:     "active",
	}
	err = AddUser(db, &user)
	if err != nil {
		panic(err.Error())
	}

	// 测试查询用户
	userByID, err := GetUserByID(db, user.UserID)
	if err != nil {
		panic(err.Error())
	}
	fmt.Printf("User with ID %d: %+v\n", user.UserID, userByID)

	// 测试修改密码
	newPassword := "newpassword"
	err = UpdateUserPassword(db, user.UserID, newPassword)
	if err != nil {
		panic(err.Error())
	}

	// 测试逻辑删除用户
	err = DeleteUser(db, user.UserID)
	if err != nil {
		panic(err.Error())
	}
}

// 添加用户
func AddUser(db *sql.DB, user *UserInfo) error {
	stmt, err := db.Prepare("INSERT INTO userinfo(username, password, registerAt, status, isdelete) VALUES(?,?,?,?,?)")
	if err != nil {
		return err
	}
	defer stmt.Close()

	result, err := stmt.Exec(user.Username, user.Password, user.RegisterAt, user.Status, user.IsDelete)
	if err != nil {
		return err
	}

	lastInsertID, err := result.LastInsertId()
	if err != nil {
		return err
	}
	user.UserID = int(lastInsertID)

	return nil
}

// 根据用户ID查询用户
func GetUserByID(db *sql.DB, userID int) (*UserInfo, error) {
	var user UserInfo

	row := db.QueryRow("SELECT * FROM userinfo WHERE userID=?", userID)
	var registerAt string
	err := row.Scan(&user.UserID, &user.Username, &user.Password, &registerAt, &user.Status, &user.IsDelete)
	if err != nil {
		return nil, err
	}

	user.RegisterAt, err = time.Parse("2006-01-02 15:04:05", registerAt)
	if err != nil {
		return nil, err
	}

	return &user, nil
}

// 修改用户密码
func UpdateUserPassword(db *sql.DB, userID int, newPassword string) error {
	stmt, err := db.Prepare("UPDATE userinfo SET password=? WHERE userID=?")
	if err != nil {
		return err
	}
	defer stmt.Close()

	_, err = stmt.Exec(newPassword, userID)
	if err != nil {
		return err
	}

	return nil
}

// 逻辑删除用户
func DeleteUser(db *sql.DB, userID int) error {
	stmt, err := db.Prepare("UPDATE userinfo SET isdelete=true WHERE userID=?")
	if err != nil {
		return err
	}
	defer stmt.Close()

	_, err = stmt.Exec(userID)
	if err != nil {
		return err
	}

	return nil
}
